use crate::norm::norm::Vector;
use std::vec;
pub fn tests_norme_ec() {
    println!("------------------------------------------------------");
    println!("NORM EUCLIDIAN");
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![0, 0, 0]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm());
    assert_eq!(u.norm(), 0.0);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![0]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm());
    assert_eq!(u.norm(), 0.0);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![1, 0]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm());
    assert_eq!(u.norm(), 1.0);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![2, 1]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm());
    assert_eq!(u.norm(), 2.236067977 as f32);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![4, 2]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm());
    assert_eq!(u.norm(), 4.472135955 as f32);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![-4, -2]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm());
    assert_eq!(u.norm(), 4.472135955 as f32);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![1., 2., 3.]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm());
    assert_eq!(u.norm(), 3.7416573);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![-1., -2.]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm());
    assert_eq!(u.norm(), 2.236067977 as f32);
    // // 0.0, 0.0, 0.0
    // let mut u = Vector::from(vec![1., 2., 3.]);
    // println!("{}, {}, {}", u.norm_1(), u.norm(), u.norm_inf());
    // // 6.0, 3.74165738, 3.0
    // let mut u = Vector::from(vec![-1., -2.]);
    // println!("{}, {}, {}", u.norm_1(), u.norm(), u.norm_inf());
    // let mut u = Vector::from(vec![4., 2.]);
    // println!("{}, {}, {}", u.norm_1(), u.norm(), u.norm_inf());
    // let mut u = Vector::from(vec![2., 1.]);
    // println!("{}, {}, {}", u.norm_1(), u.norm(), u.norm_inf());
    // let mut u = Vector::from(vec![-4., -2.]);
    // println!("{}, {}, {}", u.norm_1(), u.norm(), u.norm_inf());
    // // 3.0, 2.236067977, 2.0
}
pub fn tests_norme_mh() {
    println!("------------------------------------------------------");
    println!("NORM Manhattan");
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![0, 0, 0]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_1());
    assert_eq!(u.norm_1(), 0.0);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![0]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_1());
    assert_eq!(u.norm_1(), 0.0);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![1, 0]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_1());
    assert_eq!(u.norm_1(), 1.0);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![2, 1]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_1());
    assert_eq!(u.norm_1(), 3.);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![4, 2]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_1());
    assert_eq!(u.norm_1(), 6.);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![-4, -2]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_1());
    assert_eq!(u.norm_1(), 6.);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![1., 2., 3.]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_1());
    assert_eq!(u.norm_1(), 6.0);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![-1., -2.]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_1());
    assert_eq!(u.norm_1(), 3.0);
}

pub fn tests_norme_inf() {
    println!("------------------------------------------------------");
    println!("NORM infi");
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![0, 0, 0]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_inf());
    assert_eq!(u.norm_inf(), 0.0);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![0]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_inf());
    assert_eq!(u.norm_inf(), 0.0);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![1, 0]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_inf());
    assert_eq!(u.norm_inf(), 1.0);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![2, 1]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_inf());
    assert_eq!(u.norm_inf(), 2.);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![4, 2]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_inf());
    assert_eq!(u.norm_inf(), 4.);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![-4, -2]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_inf());
    assert_eq!(u.norm_inf(), 4.);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![1., 2., 3.]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_inf());
    assert_eq!(u.norm_inf(), 3.0);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![-1., -2.]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_inf());
    assert_eq!(u.norm_inf(), 2.0);
    println!("------------------------------------------------------");
    let mut u = Vector::new(vec![-10000., -40404040.]);
    println!("test with:\n{:?}", u.values);
    println!("{}", u.norm_inf());
    assert_eq!(u.norm_inf(), 40404040.);
}
